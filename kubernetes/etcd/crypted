#:------------------------------------------------------------------
#: MASTER ONLY - ETCDCTL
#:
#: Debemos ver primero nuestra version desde un control plane 
#: kubectl describe pod etcd-cultureta -n kube-system|grep etcd:
#: y vemos que version y la ponemos en la constante de abajo
#:------------------------------------------------------------------
{
    ETCD_VER=v3.5.12

    # choose either URL
    GOOGLE_URL=https://storage.googleapis.com/etcd
    GITHUB_URL=https://github.com/etcd-io/etcd/releases/download
    DOWNLOAD_URL=${GOOGLE_URL}

    rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
    rm -rf /tmp/etcd-download-test && mkdir -p /tmp/etcd-download-test

    curl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz
    tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /tmp/etcd-download-test --strip-components=1
    rm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz

    /tmp/etcd-download-test/etcd --version
    /tmp/etcd-download-test/etcdctl version
    /tmp/etcd-download-test/etcdutl version

    sudo cp -a /tmp/etcd-download-test/etcdctl /usr/local/bin/ && chmod +x /usr/local/bin/etcdctl
    
    etcdctl version
}
#:------------------------------------------------------------------


#:------------------------------------------------------------------
#: REST CRYPT ETCD
#: 
#: veamos ahora como podemos hacer que nuestros secrets esten 
#: encriptados en la bbdd etcd la cual por defecto no lo estan
#: y los datos de nuestros secrets estan en plan se pueden leer
#:------------------------------------------------------------------
1.  generamos crypt key

{
    ENCRYPTION_KEY=$(head -c 32 /dev/urandom | base64)
    echo $ENCRYPTION_KEY
    
    #bJLhjfnxcVf6L8r4S8s7jHkJOYiKVjXxSs9ehkAmbdk= # algo parecido :)
}

2. creamos manifest

cat <<EOF | tee /tmp/enc.yaml
apiVersion: apiserver.config.k8s.io/v1
kind: EncryptionConfiguration
resources:
  - resources:
      - secrets
      - configmaps
    providers:
      - aescbc:
          keys:
            - name: key1
              secret: $ENCRYPTION_KEY
      - identity: {}
EOF

sudo mkdir /etc/kubernetes/enc/
sudo cp -a enc.yaml /etc/kubernetes/enc/
sudo chown root:root /etc/kubernetes/enc/enc.yaml

3. aplicamos la configuracion para usar el encriptado en reposo 
antes de guardar en el etcd, para lo cual editamos el fichero 
del apiserver debiendo quedar como dejo abajo el fragmento extraido
de la documentacion oficial

sudo nano -w /etc/kubernetes/manifests/kube-apiserver.yaml

---
#
# This is a fragment of a manifest for a static Pod.
# Check whether this is correct for your cluster and for your API server.
#
apiVersion: v1
kind: Pod
metadata:
  annotations:
    kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 10.20.30.40:443
  creationTimestamp: null
  labels:
    app.kubernetes.io/component: kube-apiserver
    tier: control-plane
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    ...
    - --encryption-provider-config=/etc/kubernetes/enc/enc.yaml  # add this line
    volumeMounts:
    ...
    - name: enc                           # add this line
      mountPath: /etc/kubernetes/enc      # add this line
      readOnly: true                      # add this line
    ...
  volumes:
  ...
  - name: enc                             # add this line
    hostPath:                             # add this line
      path: /etc/kubernetes/enc           # add this line
      type: DirectoryOrCreate             # add this line
  ...

por ultimo reiniamos el control plane y volvemos a probar a ver como
veriamos un secreto nuevo que creasemos

4. Probamos

kubectl delete secret my-secret
kubectl create secret generic my-secret --from-literal=APP_TOKEN=SOY_EL_TOKEN

sudo ETCDCTL_API=3 etcdctl \
   --cacert=/etc/kubernetes/pki/etcd/ca.crt   \
   --cert=/etc/kubernetes/pki/etcd/server.crt \
   --key=/etc/kubernetes/pki/etcd/server.key  \
   get /registry/secrets/default/my-secret

# veremos una salida parecido a esto donde ya no se ve el dato 
# del secret en plano ahora si esta encriptado en el etcd   
k8s:enc:aescbc:v1:key1:o�
�,;��w%w���F�fd����z��(��a��ք
����?U�
       W��3bGR4���q��>W-W�۸H�ɼ�|���YԳ$�*/���Q���ϦD�N��_%k�g��|��Pt�%P6,�������:��UD��;��7�9�e0�!�ck��������ǿ���.��gߠ�
            ��0����x�b$i.F�k7R���u��|O�>�0�!�>��S`]mg�R>KIw"�Jƶ*��c�P��	m